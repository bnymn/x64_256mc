#include "x64_256mc.h"

void x64_256mc_inv_n(unsigned long *r, unsigned long c, void *NOPARAM, unsigned long *a)
{
	unsigned long g[16][4];
	unsigned long P = 0xFFFFFFFFFFFFFFFFUL -c -1;
	unsigned long mask = 0x0F00000000000000UL;
	int i;

	// Precomputation
	// g[0]
	g[0][0] = 1;
	g[0][1] = 0;
	g[0][2] = 0;
	g[0][3] = 0;

	// g[1]
	g[1][0] = a[0];
	g[1][1] = a[1];
	g[1][2] = a[2];
	g[1][3] = a[3];

	// g[2]
	x64_256mc_sqr_n(g[2], c, NOPARAM, a);

	// g[n]
	for(i=3; i<16; i++)
	{
		x64_256mc_mul_n(g[i], c, NOPARAM, g[i-1], g[1]);
	}

	r[0] = g[15][0];
	r[1] = g[15][1];
	r[2] = g[15][2];
	r[3] = g[15][3];

	int j = 0;
	for(i=0; i<192; i=i+4)
	{
		j++;
		x64_256mc_sqr_n(r, c, NOPARAM, r);
		x64_256mc_sqr_n(r, c, NOPARAM, r);
		x64_256mc_sqr_n(r, c, NOPARAM, r);
		x64_256mc_sqr_n(r, c, NOPARAM, r);
		x64_256mc_mul_n(r, c, NOPARAM, r, g[15]);
	}

	for(i=0; i<=56; i=i+4)
	{
		int t = ((P & (mask >> i)) >> (56-i));
		x64_256mc_sqr_n(r, c, NOPARAM, r);
		x64_256mc_sqr_n(r, c, NOPARAM, r);
		x64_256mc_sqr_n(r, c, NOPARAM, r);
		x64_256mc_sqr_n(r, c, NOPARAM, r);
		x64_256mc_mul_n(r, c, NOPARAM, r, g[t]);
	}
}
